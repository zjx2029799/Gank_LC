class Solution {
    public int islandPerimeter(int[][] grid) {
        //dfs 每个cell周围是0的边算入周长总数，周围是边界也算入周长
        if(grid == null || grid[0] == null || grid.length == 0 || grid[0].length == 0) return 0;
        int prem = 0;
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j] == 1){
                    prem += helper(grid, i, j);
                }
            }
        }
        return prem;
    }
    
    private int helper(int[][] grid, int i, int j){
        int tmp = 0;
        int top = (i-1) >= 0? grid[i-1][j]: 0;
        int down = (i+1) < grid.length? grid[i+1][j]: 0;
        int left = (j-1) >= 0 ? grid[i][j-1]: 0;
        int right = (j+1) < grid[0].length? grid[i][j+1]: 0;
        
        if(top == 0) tmp++;
        if(down == 0) tmp++;
        if(left == 0) tmp++;
        if(right == 0) tmp++;
        return tmp;
    }
}
