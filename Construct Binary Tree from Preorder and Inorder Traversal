/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        //primitive idea, think about the order of the two traverse tree
        //then we find that when we use the preorder index as the root, and find the cur root in inorder
        // we can know the left subtree and right subtree, we just need to make sure the related index
         return helper(preorder, 0, 0, inorder.length-1, inorder);
    }
    
    private TreeNode helper(int[] preorder, int preIndex, int inIndex, int inEnd, int[] inorder){
        if(preIndex > preorder.length-1 || inIndex > inEnd) return null;
        TreeNode root = new TreeNode(preorder[preIndex]);
        int index = 0;
        for(int i=inIndex; i<inorder.length; i++){
            if(inorder[i] == root.val){
                index = i;
            }
        }
        root.left = helper(preorder, preIndex+1, inIndex, index-1, inorder);
        root.right = helper(preorder, preIndex + (index - inIndex) + 1, index+1, inEnd, inorder);
        return root;
    }
    
}
