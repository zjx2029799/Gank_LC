public class Solution {
    public int search(int[] nums, int target) {
       //想到要用binary search，因为扫一遍解决没有意义
        //二分搜索法的关键在于获得了中间数后，判断下面要搜索左半段还是右半段，我们观察上面红色的数字都是升序的，由此我们可以观察出规律，如果中间的数小于最右边的数，则右半段是有序的，若中间数大于最右边数，则左半段是有序的，我们只要在有序的半段里用首尾两个数组来判断目标值是否在这一区域内，这样就可以确定保留哪半边了
        if(nums == null || nums.length == 0) return -1;
        int left = 0;
        int right = nums.length - 1;
        
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(nums[mid] == target) return mid;
            if(nums[mid] < nums[right]){
                //说明此时右半边有序
                if(nums[mid] < target && target <= nums[right])
                    //满足这个条件target才会在这个有序数组的一边，否则就在另一半
                    left = mid+1;
                else
                    right = mid-1;
            }else{
                //此时左半边有序
                if(nums[mid] > target && target >= nums[left])
                    right = mid-1;
                else
                    left = mid+1;
            }
            //内层的两个if要把所有值域包括
            //1. （]   2. [) 
        }   
        return -1;
    }
}
