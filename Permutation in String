class Solution {
    
    public boolean checkInclusion(String s1, String s2) {
        //bruto force 求出s1的所有permutation and check each one  超时
        //sliding window and use array to store character
        if(s1 == null || s2 == null || s1.length() > s2.length()) return false;
        int[] map1 = new int[26];
        int[] map2 = new int[26];
        
        for(int i=0; i<s1.length(); i++){
            map1[s1.charAt(i) - 'a']++;
            map2[s2.charAt(i) - 'a']++;
        }
        
        for(int i=0; i<s2.length() - s1.length(); i++){
            if(isMatch(map1, map2))
                return true;
            map2[s2.charAt(i + s1.length()) - 'a']++;
            map2[s2.charAt(i) - 'a']--;
        }
        return isMatch(map1, map2);
    }
    
    private boolean isMatch(int[] map1, int[] map2){
        for(int i=0; i<26; i++){
            if(map1[i] != map2[i])
                return false;
        }
        return true;
    }
    /*
     public boolean checkInclusion(String s1, String s2) {
         //sort them and compare if they are equal
         s1 = sort(s1);
         
         for(int i=0; i<=s2.length() - s1.length(); i++){
             if(s1.equals(sort(s2.substring(i, i + s1.length()))))
                 return true;
         }
         return false;
     }
    
    private String sort(String s){
        char[] chs = s.toCharArray();
        Arrays.sort(chs);
        return new String(chs);
    }
    */
}
