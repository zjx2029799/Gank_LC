class Solution {
    public boolean exist(char[][] board, String word) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(helper(board, word,0,i,j,visited))
                    return true;
            }
        }
        return false;
    }
    private boolean helper(char[][] board, String word, int index, int y, int x, boolean[][] visited){
        //find to the end char
        if(index == word.length())
            return true;
        //arrive the boundary
        if(y>=board.length || y<0 || x>=board[0].length || x<0)
            return false;
        //the char in this iteration has been visited
        if(visited[y][x]) return false;
        //char not equals to the word's char
        if(board[y][x] != word.charAt(index))
            return false;
        //other condition make this position true as visited
        visited[y][x] = true;
        //dfs function up and down, left and right
        boolean exist = helper(board, word, index+1, y+1,x,visited) || helper(board, word, index+1, y-1,x,visited) ||
            helper(board, word, index+1, y,x+1,visited) || helper(board, word, index+1, y,x-1,visited);
        //reset x, y as false for the next iteration
        visited[y][x] = false;
        return exist;
    }
}
