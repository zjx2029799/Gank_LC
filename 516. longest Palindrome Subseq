class Solution {
    public int longestPalindromeSubseq(String s) {
        //improved dp solution space: O(n)
        if(s == null || s.length() == 0) return 0;
        int len = s.length();
        int[] dp = new int[len];
        
        for(int i=len-1; i>=0; i--){
            int iPlusOneJMinusOne = 0;
            dp[i] = 1;
            for(int j=i+1; j<len; j++){
                int iJ = 0;
                if(s.charAt(i) == s.charAt(j)){
                    iJ = 2 + iPlusOneJMinusOne;
                }else{
                    iJ = Math.max(dp[j], dp[j-1]);
                }
                iPlusOneJMinusOne = dp[j];
                dp[j] = iJ;
            }
        }
        return dp[len-1];
    }
    
    /*
    //native DP space complexity: O(n^2)
    public int longestPalindromeSubseq(String s) {
        //substring是连续的，不可以间隔开， subseq是可以任意取字符串的几段拼起来
        //DP 考虑一个子序列中最长的回文 如果头尾相同直接2+中间，如果不同就是左边或者右边
        if(s == null || s.length() == 0) return 0;
        //size = 0: m[i][i-1]
        //size = 1: m[i][i]
        int[][] dp = new int[s.length()][s.length()];
        for(int i=0; i<s.length(); i++){
            dp[i][i] = 1;
        }
        
        for(int i=s.length()-1; i>=0; i--){
            for(int j=i+1; j<s.length(); j++){
               if(s.charAt(i) == s.charAt(j)){
                   int tmp = (i+1) > (j-1)? 0: dp[i+1][j-1];
                   dp[i][j] = tmp + 2;
               }else{
                   dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);
               }
            }
        }
        return dp[0][s.length()-1];
    }
    */
}
