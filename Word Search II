class Solution {
//除了字典树法，这里也可以简单的套用1中的解法
    public List<String> findWords(char[][] board, String[] words) {
        //沿用word search I中的方法，对每个word 进行深度优先搜索
        //时间复杂度为N^3
        List<String> res = new ArrayList<>();
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                for(int k=0; k<words.length; k++){
                    if(dfs(board, words[k], i, j, 0, visited)){
                          if(!res.contains(words[k]))
                              res.add(words[k]); 
                    }
                }
            }
        }
        return res;
    }
    
    private boolean dfs(char[][] board, String word, int x, int y, int index, boolean[][] visited){
        if(index == word.length()) return true;
        if(x >= board.length || x < 0 || y >= board[0].length || y < 0)
            return false;
        if(visited[x][y]) return false;
        if(board[x][y] != word.charAt(index)) return false;
        visited[x][y] = true;
        boolean exist = dfs(board, word, x-1, y, index+1, visited) || dfs(board, word, x+1, y, index+1, visited) ||
            dfs(board, word, x, y+1, index+1, visited) || dfs(board, word, x, y-1, index+1, visited);
        visited[x][y] = false;
        return exist;
    }
}
