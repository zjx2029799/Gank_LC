/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    private static final String nu = "null";
    private static final String spliter = ",";
    // Encodes a tree to a single string.
    //build string as pre-order 
    public String serialize(TreeNode root) {
       StringBuilder sb = new StringBuilder();
        buildString(root, sb);
        return sb.toString();
    }
    
    private void buildString(TreeNode root, StringBuilder sb){
        if(root == null)
            sb.append(nu).append(spliter);
        else{
            sb.append(root.val).append(spliter);
            buildString(root.left, sb);
            buildString(root.right, sb);
        }
    }
   

    // Decodes your encoded data to tree.
    //give the tree pre-order
    public TreeNode deserialize(String data) {
        Queue<String> q = new LinkedList<>();
        q.addAll(Arrays.asList(data.split(spliter)));
        return buildTree(q);
    }
    
    private TreeNode buildTree(Queue<String> q){
       String node = q.poll();
        if(node.equals(nu)) return null;
        else{
            TreeNode root = new TreeNode(Integer.valueOf(node));
            root.left = buildTree(q);
            root.right = buildTree(q);
            return root;
        }
       
    }
    
   
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
