class Solution {
    public boolean isBipartite(int[][] graph) {
        //初始化，color==0
        int[] colors = new int[graph.length];
        for(int i=0; i<graph.length; i++){
            //如果未被访问
            if(colors[i] == 0 && !bfs(graph, 1, i, colors))
                return false;
        }
        return true;
    }
    
    //bfs
    private boolean bfs(int[][] graph, int color, int cur, int[] colors){
        Deque<Integer> q = new LinkedList<>();
        q.addFirst(cur);
        colors[cur] = color;
        while(!q.isEmpty()){
            int i = q.removeLast();
            for(int j: graph[i]){
                if(colors[j] == 0){
                    q.addFirst(j);
                    colors[j] = colors[i] * -1;
                }else{
                    if(colors[j] == colors[i])
                        return false;
                }
            }
        }
        return true;
    }
    
    //dfs
    private boolean isValid(int[][] graph, int color, int cur, int[] colors){
        if(colors[cur] != 0) return color == colors[cur];
        colors[cur] = color;
        for(int i: graph[cur]){
            if(!isValid(graph, color * -1, i, colors))
                return false;
        }
        return true;
    }
}
