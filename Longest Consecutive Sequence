class Solution {
    public int longestConsecutive(int[] nums) {
        //O(n) we need use extra space: hashSet or HashMap
        //HashMap to store left and right value of cur value
        if(nums == null || nums.length == 0) return 0;
        int max = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int num: nums){
            if(map.containsKey(num)) continue;
            int left = map.containsKey(num-1)? map.get(num-1): 0;
            int right = map.containsKey(num+1)? map.get(num+1): 0;
            int sum = left + right + 1;
            max = Math.max(max, sum);
            map.put(num, sum);
            map.put(num-left, sum);
            map.put(num+right, sum);
        }
        return max;
        
    }
    
    
   /* 
    public int longestConsecutive(int[] nums) {
        //O(n) we need use extra space: hashSet or HashMap
        //Hashset to store all of the numbers in nums
        if(nums == null || nums.length == 0) return 0;
        HashSet<Integer> set = new HashSet<>();
        int max = 0;
        for(int num: nums)
            set.add(num);
        for(int num: nums){
            if(set.remove(num)){
                int pre = num - 1;
                int next = num + 1;
                while(set.remove(pre)) pre--;
                while(set.remove(next)) next++;
                max = Math.max(max, next-pre-1);
            } 
        }
        return max;
        
    }
    
    
    
    /*
    public int longestConsecutive(int[] nums) {
        //brute force: sort the array
        // notice, skip duplicatefor in the loop
        if(nums == null || nums.length == 0)
            return 0;
        Arrays.sort(nums);
        int cur = 1;
        int max = 1;
        for(int i=1; i<nums.length; i++){
            if(nums[i] == nums[i-1]) continue;
            if(nums[i] == nums[i-1] + 1)
                cur++;
            else{
                max = Math.max(max, cur);
                cur = 1;
            }
        }
        return Math.max(cur, max);
    }
    */
}
