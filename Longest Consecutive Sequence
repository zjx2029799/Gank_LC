class Solution {
   public int longestConsecutive(int[] nums) {
       //使用hashMap，原理和hashset 差不多
        //这时候，我们记录的是当前num的左边连续数字的数量+右边连续数字的数量+num本身
        //同时更新max
        if(nums == null || nums.length == 0) return 0;
        int max = 1;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int num: nums){
            if(map.containsKey(num)) continue;//避免重复计算
            int left = map.containsKey(num-1)? map.get(num-1): 0;
            int right = map.containsKey(num+1)? map.get(num+1): 0;
            int sum = right + left + 1;
            max = Math.max(max, sum);
            //更新左右和本身带有连续数字
            map.put(num, sum);
            map.put(num-left, sum);
            map.put(num+right, sum);
        }
        return max;
    }
    
    
   /* 
    public int longestConsecutive(int[] nums) {
        //O(n) we need use extra space: hashSet or HashMap
        //Hashset to store all of the numbers in nums
        if(nums == null || nums.length == 0) return 0;
        HashSet<Integer> set = new HashSet<>();
        int max = 0;
        for(int num: nums)
            set.add(num);
        for(int num: nums){
            if(set.remove(num)){
                int pre = num - 1;
                int next = num + 1;
                while(set.remove(pre)) pre--;
                while(set.remove(next)) next++;
                max = Math.max(max, next-pre-1);
            } 
        }
        return max;
        
    }
    
    
    
   public int longestConsecutive(int[] nums) {
       //HashSet 收录每个元素，然后分别从每个元素出发寻找最长连续字串
        //使用HashSet 还可以有效去重
        if(nums == null || nums.length == 0) return 0;
        int max = 1;
        HashSet<Integer> set = new HashSet<>();
        for(int num: nums){
            set.add(num);
        }
        for(int num: nums){
            if(set.remove(num)){
                int pre = num - 1;
                int next = num + 1;
                while(set.remove(pre)) pre--;
                while(set.remove(next)) next++;
                max = Math.max(max, next - pre - 1);
            }
        }
        return max;
    }
}
