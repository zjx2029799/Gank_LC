/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    /*
    1. find max path, we need to find every path from the tree and maintain a max value
    2. how to find every path in a binary tree? we can find from each node and the path through this node
        which is pathValue = node.val + leftPathValue + rightPathValue
    3. base case: leaf node: return its value, leftPathValue, rightPathValue, return node.val + max(left, right)
        left or right < 0 directly return 0;
    */
    public int maxPathSum(TreeNode root) {
        if(root == null)
            return Integer.MIN_VALUE;
        int[] res = new int[] {Integer.MIN_VALUE};
        dfs(root, res);
        return res[0];
    }
    
    private int dfs(TreeNode root, int[] res){
        if(root == null)
            return 0;
        int left = root.left == null? 0: Math.max(0, dfs(root.left, res));
        int right = root.right == null? 0: Math.max(0, dfs(root.right, res));
        res[0] = Math.max(res[0], root.val + left + right);
        return root.val + Math.max(left, right);
    }
}
