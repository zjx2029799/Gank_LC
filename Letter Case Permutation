class Solution {
    public List<String> letterCasePermutation(String S) {
        //对于每增加一个字母，permutation总数就2^(n+1)，因此，只需要递归每一次的结果添加上新的值就可以了
        List<StringBuilder> list = new ArrayList<>();
        list.add(new StringBuilder());
        List<String> res = new ArrayList<>();
        char[] chs = S.toCharArray();
        
        for(char c: chs){
            int size = list.size();
            if(Character.isLetter(c)){
                for(int i=0; i<size; i++){
                    list.add(new StringBuilder(list.get(i)));
                    list.get(i).append(Character.toLowerCase(c));
                    list.get(size + i).append(Character.toUpperCase(c));
                }    
            }else{
                for(int i=0; i<size; i++){
                    list.get(i).append(c);
                }
            }
        }
        
        for(StringBuilder sb: list){
            res.add(sb.toString());
        }
        
        return res;
    }
}
