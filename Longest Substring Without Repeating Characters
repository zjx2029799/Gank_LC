class Solution {
    public int lengthOfLongestSubstring(String s) {
        //O(n) one pass, 用一个hashmap每次来记录新的窗口的起始index，这样只需要扫一遍
        Map<Character, Integer> map = new HashMap<>();
        int max = 0;
        for(int i=0, j=0; j<s.length(); j++){
            if(map.containsKey(s.charAt(j)) ){
                i = Math.max(i, map.get(s.charAt(j)));
            }
            max = Math.max(max, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return max;
    }
    
    /* 
     public int lengthOfLongestSubstring(String s) {
         //two pass O(2n)滑动窗口
         int left = 0;
         int right = 0;
         int max = 0;
         Set<Character> set = new HashSet<>();
         while(left < s.length() && right < s.length()){
             if(!set.contains(s.charAt(right))){
                 set.add(s.charAt(right++));
                 max = Math.max(max, (right - left));
             }else
                 set.remove(s.charAt(left++));
         }
         return max;
     }
    
    /*O(n^2)
    public int lengthOfLongestSubstring(String s) {
        //brut to force
        if(s == null || s.length() == 0) return 0;
        int max = 1;
        for(int i=0;i<s.length();i++){
            HashSet<Character> set = new HashSet<>();
            int sum = 0;
            for(int j=i;j<s.length();j++){
                if(set.contains(s.charAt(j))){
                    break;
                }else{
                    set.add(s.charAt(j));
                    sum++;
                }
            }
            max = Math.max(sum, max);
        }
        return max;
    }
    */
}
