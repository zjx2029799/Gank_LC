class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> tmp = new ArrayList<>();
        backtrack(res, tmp, candidates, target, 0);
        return res;
    }
    
   private void backtrack(List<List<Integer>> res, List<Integer> tmp, int[] cand, int target, int index){
       if(target < 0) return;
       if(target == 0){
           res.add(new ArrayList<>(tmp));
           return;
       }
       
       for(int i=index; i<cand.length; i++){
           tmp.add(cand[i]);
           backtrack(res, tmp, cand, target - cand[i], i);
           tmp.remove(tmp.size()-1);
       }
   }
}
