class Solution {
    public List<String> findItinerary(String[][] tickets) {
        //欧拉路径方法：欧拉路径，在一个连通图内，把每一条边都访问一次
        //用priorityQueue 通过， sorted list还是有问题
        if(tickets == null || tickets[0] == null)
            return new ArrayList<>();
        //Map<String, PriorityQueue<String>> map = new HashMap<>();
        Map<String, List<String>> map = new HashMap<>();
        for(String[] strs: tickets){
            if(!map.containsKey(strs[0]))
                //map.put(strs[0], new PriorityQueue<String>());
                map.put(strs[0], new LinkedList<String>());
            //map.get(strs[0]).offer(strs[1]);
            map.get(strs[0]).add(strs[1]);
        }
        
        for(List<String> list: map.values()){
            Collections.sort(list);
        }
       
        LinkedList<String> res = new LinkedList<>();
        dfs("JFK", map, res);
        return res;
    }
    
    //private void dfs(String start, Map<String, PriorityQueue<String>> map, LinkedList<String> res){
    private void dfs(String start, Map<String, List<String>> map, LinkedList<String> res){
        //PriorityQueue<String> q = map.get(start);
        List<String> list = map.get(start);
        /*
        while(q != null && !q.isEmpty()){
            dfs(q.poll(), map, res);
        }
        */
        if(list != null){
            for(int i=0; i<list.size(); i++)
                dfs(list.remove(i), map, res);
        }
            
        res.addFirst(start);
    }
    
    /*
    public List<String> findItinerary(String[][] tickets) {
        if(tickets == null || tickets[0] == null)
            return new ArrayList<>();
        //O(n) + O(nlogn) + O(n!)假设每个点都可以有n-1个点
        //create graph
        Map<String, List<String>> map = new HashMap<>();
        int len = tickets.length + 1;
        for(String[] strs: tickets){
            if(!map.containsKey(strs[0]))
                map.put(strs[0], new ArrayList<>());
            map.get(strs[0]).add(strs[1]);
        }
        
        //sort the list
        for(List<String> list: map.values()){
            Collections.sort(list);
        }
        
        List<String> res = new ArrayList<>();
        res.add("JFK");
        if(dfs(map, res, len, "JFK")){
            return res;
        }
        return null;
    }
    
    private boolean dfs(Map<String, List<String>> map, List<String> path, int lens, String cur){
        if(path.size() == lens)
            return true;
        if(!map.containsKey(cur))
            return false;
        
        List<String> destinations = map.get(cur);
        for(int i=0; i<destinations.size(); i++){
            String dest = destinations.get(i);
            destinations.remove(i);
            path.add(dest);
            if(dfs(map, path, lens, dest)){
                return true;
            }
            path.remove(path.size()-1);
            //必须add到原来的节点上去
            destinations.add(i, dest);
        }
        return false;
    }
    */
}
