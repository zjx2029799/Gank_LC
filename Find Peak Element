class Solution {
     public int findPeakElement(int[] nums) {
         //要更快则需要binary
        // iteration
         int left = 0;
         int right = nums.length -1;
         while(left < right){
             int mid = left + (right - left) / 2;
             if(nums[mid] > nums[mid+1])
                 right = mid;
             else
                 left = mid + 1;
         }
         return left;
     }
    
    
    
    /*
  public int findPeakElement(int[] nums) {
        //binary recursion
         return helper(nums, 0, nums.length - 1);
     }
    private int helper(int[] nums, int left, int right){
        if(left == right) return left;
        int mid = left + (right - left) / 2;
        if(nums[mid] > nums[mid + 1])
            return helper(nums, left, mid);
        else
            return helper(nums, mid + 1, right);
        
    }
    
    */
    
    
    /*
    public int findPeakElement(int[] nums) {
        //因为是return任何一个peak就行，不需要return最大的peak,所以直接一次循环O(h)
        //如果求最大的，可以每找到一个peak存入map里或者只保留一个全局最大peak和其对应的i；
        for(int i=0; i<nums.length - 1; i++){
            if(nums[i] > nums[i+1])
                return i;
        }
        return nums.length - 1;
    }
    */
}
