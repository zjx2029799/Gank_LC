class Solution {
    public int findDuplicate(int[] nums) {
       //用快满指针发，因为在n+1个位置中放n个数，至少有一个会重复
        //因此可以想象这是一个链表的环
        int slow = nums[0];
        int fast = nums[0];
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);
        //当找到相遇点时，原理和链表一样了，环的长度就是保持一个指针不懂，移动另一个直到相遇，记录count
        //找到环起点的方法就是保持一个start点和相遇点，同时移动，相遇的位置就是环的起点
        int find = nums[0];
        while(find != slow){
            find = nums[find];
            slow = nums[slow];
        }
        return find;
    }
    
    /*
    public int findDuplicate(int[] nums) {
        //primitive idea: 二分法,想到有n个数，则每次砍一半的规则是 mid两边的
        // O(nlogN)
        int start = 1;
        int end = nums.length - 1;
        while(start <= end){
            int mid = start + (end - start)/2;
            int count = 0;
            for(int i=0; i<nums.length; i++){
                if(nums[i] <= mid) count++;
            }
            //在前半部分 
            if(count > mid) end = mid - 1;
            //在后半部分
            else start = mid + 1;
        }
        return start;
    }
    */
}
