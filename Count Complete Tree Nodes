/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
        //对于一颗满树，如果左子树和右子树height相同，则说明是完全满树，节点个数为2^h -1
        //如果不相等，则说明node个数为左子树个数+右子树个数+1
        //因此可以用递归的思路,root节点的height为0，如果node==null，则height=-1
        return helper(root, -1, -1);
    }
    
    private int helper(TreeNode root, int left, int right){
        //如果没有初始化，则计算他
        if(left == -1){
            TreeNode cur = root;
            left = 0;
            while(cur != null){
                left++;
                cur = cur.left;
            }
        }
        
        //同样初始化右边
        if(right == -1){
            TreeNode cur = root;
            right = 0;
            while(cur != null){
                right++;
                cur = cur.right;
            }
        }
        
        if(left == right) return (1 << left) - 1;
        return helper(root.left, left - 1, -1) + helper(root.right, -1, right - 1) + 1;
    }
    /*
    private int count = 0;
    public int countNodes(TreeNode root) {
        //traverse the tree in any order: 这样会超时，此题需要我们用少于O(n)
        helper(root);
        return count;
    }
    
    private void helper(TreeNode root){
        if(root == null){
            return;
        }
        
        helper(root.left);
        count = count + 1;
        helper(root.right);
    }
    */
}
