/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //recursion 
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        helper(root, res);
        return res;
    }
    
    private void helper(TreeNode root, List<Integer> res){
        if(root == null) return;
        helper(root.left, res);
        helper(root.right, res);
        res.add(root.val);
    }
    
    /* iteration
   public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        Deque<Path> deque = new LinkedList<>();
        deque.addFirst(new Path(0, root));
        
        while(!deque.isEmpty()){
            Path tmp = deque.removeFirst();
            if(tmp.node == null) continue;
            if(tmp.oper == 1)
                res.add(tmp.node.val);
            else{
                deque.addFirst(new Path(1, tmp.node));
                deque.addFirst(new Path(0, tmp.node.right));
                deque.addFirst(new Path(0, tmp.node.left));
            }
        }
        return res;
    }
    
    private class Path{
        int oper; // 0: visit, 1: print
        TreeNode node;
        Path(int oper, TreeNode node){
            this.oper = oper;
            this.node = node;
        }
    }
    */
}
