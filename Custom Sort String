class Solution {
    public String customSortString(String S, String T) {
        if(S == null || S.length() == 0) return "";
        int[] map = new int[26];
        for(char t: T.toCharArray()){
            map[t - 'a']++; 
        }
        StringBuilder sb = new StringBuilder();
        for(char s: S.toCharArray()){
            for(int i=0; i<map[s - 'a']; i++)
                sb.append(s);
            map[s - 'a'] = 0;
        }
        
        for(char t: T.toCharArray()){
            if(map[t - 'a'] != 0)
                sb.append(t);
        }
        return sb.toString();
    }
    
    /* TO DO: find a way to sort the StringBuider found in S based on the map value
    public String customSortString(String S, String T) {
        if(S == null || S.length() == 0) return "";
        Map<Character, Integer> map = new HashMap<>();
        int index = 0;
        for(char s: S.toCharArray()){
            map.put(s, index++);
        }
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        for(int i=0; i<T.length(); i++){
            if(map.containsKey(T.charAt(i))){
                sb1.append(T.charAt(i));
            }else
                sb2.append(T.charAt(i));
        }
        char[] chs = sb1.toString().toCharArray();
        Arrays.sort(chs, new Comparator<Character>(){
            public int compare(Character c1, Character c2){
                return map.get(c1) - map.get(c2);
            }
        });
        String ss = new String(chs);
        return ss + sb1.toString();
    }
    */
}
