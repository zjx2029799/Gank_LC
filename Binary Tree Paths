/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        //iteration，这个和sum path类似，我们用一个stack来保存路径上的string
        //当遇到leaf node把string存起来
        Deque<TreeNode> stack1 = new LinkedList<>();
        Deque<String> stack2 = new LinkedList<>();
        List<String> res = new ArrayList<>();
        if(root == null) return res;
        stack1.addFirst(root);
        //first need to store a "" to deal with the case: only root node exist
        stack2.addFirst("");
        while(!stack1.isEmpty()){
            TreeNode cur = stack1.removeFirst();
            String str = stack2.removeFirst();
            if(cur.left == null && cur.right == null){
                res.add(str + cur.val);
            }
            
            if(cur.left != null){
                stack1.addFirst(cur.left);
                stack2.addFirst(str + cur.val + "->");
            }
            
            if(cur.right != null){
                stack1.addFirst(cur.right);
                stack2.addFirst(str + cur.val + "->");
            }
        }
        return res;
    }
    
    /*
    public List<String> binaryTreePaths(TreeNode root) {
        //recursion 每次add新node，直到走到叶子节点得到一条path
        List<String> res = new ArrayList<>();
        if(root == null) return res;
        helper(root, res, "");
        return res;
    }
    private void helper(TreeNode root, List<String> res, String str){
        if(root.left == null && root.right == null){
            //leaf node
            res.add(str + root.val);
        }
        //左边不为空，则收集cur node的值然后在继续递归后面的node
        if(root.left != null){
            helper(root.left, res, str + root.val + "->");
        }
        //右边不为空，则收集cur node的值然后在继续递归后面的node
        if(root.right != null){
            helper(root.right, res, str + root.val + "->");
        }
    }
    */
}
