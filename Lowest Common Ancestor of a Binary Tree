/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //To find the lowest common ancestor, we need to find where is p and q and a way to track their ancestors. A parent pointer for each node found is good for the job. After we found both p and q, we create a set of p's ancestors. Then we travel through q's ancestors, the first one appears in p's is our answer.
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        //iteration:
        if(root == null) return null;
        HashMap<TreeNode, TreeNode> parent = new HashMap<>();
        parent.put(root, null);
        Deque<TreeNode> stack = new ArrayDeque<>();
        stack.addFirst(root);
        //find the position p and q in the tree
        while(!parent.containsKey(p) || !parent.containsKey(q)){
            TreeNode cur = stack.removeFirst();
            if(cur.left != null){
                stack.addFirst(cur.left);
                //保存node和其parent结点
                parent.put(cur.left, cur);
            }
            
            if(cur.right != null){
                stack.addFirst(cur.right);
                parent.put(cur.right, cur);
            }
        }
        
        //当p和q都找到并且存入map映射中时，存入p或q的所有ancestors，然后寻找第一个出现的q的parent
        HashSet<TreeNode> set = new HashSet<>();
        while(p != null){
            set.add(p);
            p = parent.get(p);
        }
        while(!set.contains(q)){
            q = parent.get(q);
        }
        return q;
    }
    
    /*
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        //思路和BST差不多，也是看这两个node是分别在左右两边还是一边，用递归来做就好
        //没找到就是返回null, 找到了就返回相应的root节点
        if(root == null || root == p || root == q)
            return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if(left != null && right != null)
            return root;
        else if(left != null)
            return left;
        else
            return right;
        
    }
    */
}
