class Solution {
    public int calculate(String s) {
        //因为没有括号，因此符号可以直接加在数字前面压入栈
        //遇到乘除号直接算然后入栈
        //如果担心溢出就都用long类型
        s = s.replace(" ", "");
        char[] chs = s.toCharArray();
        Deque<Integer> stack = new ArrayDeque<>();
        int first = getNext(0, s);
        stack.addFirst(first);
        int index = ("" + first).length();
        while(index < chs.length){
            int next = getNext(index+1, s);
            if(chs[index] == '+') stack.addFirst(next);
            if(chs[index] == '-') stack.addFirst(-next);
            if(chs[index] == '*') stack.addFirst(stack.removeFirst() * next);
            if(chs[index] == '/') stack.addFirst(stack.removeFirst() / next); 
            index = index + ("" + next).length() + 1;
        }
        int res = 0;
        
        while(!stack.isEmpty()){
            res += stack.removeFirst();
        }
        return res;
    }
    
    private int getNext(int index, String s){
        int res = 0;
        while(index < s.length() && Character.isDigit(s.charAt(index))){
            res = res*10 + Character.getNumericValue(s.charAt(index));
            index++;
        }
        return res;
    }
}

