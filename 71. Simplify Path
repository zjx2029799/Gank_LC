class Solution {
    public String simplifyPath(String path) {
        //scan string: '/', '.', 'letter'
        //use stack
        if(path == null || path.length() == 0)
            return "";
        String[] strs = path.split("/");
        Deque<String> stack = new LinkedList<>();
        for(int i=0; i<strs.length; i++){
            if(!strs[i].equals("") && !strs[i].equals(".") && !strs[i].equals(".."))
                stack.addFirst(strs[i]);
            else if(!stack.isEmpty() && strs[i].equals("..")){
                stack.removeFirst();
            }        
        }
        StringBuilder sb = new StringBuilder();
        sb.append("/");
        List<String> list = new ArrayList<>();
        while(!stack.isEmpty()){
            list.add(stack.removeFirst());
        }
        Collections.reverse(list);
        
        for(String str: list){
            sb.append(str).append("/");
        }
        
        int len = sb.length();
        
        return len == 1? sb.toString(): sb.toString().substring(0, len-1);
    }
}
