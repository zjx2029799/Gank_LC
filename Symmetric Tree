/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        //iteration, 想到iteration的话就是安装顺序的思维，从root节点的左右孩子开始，一路往下
        //用stack保存过程
        if(root == null) return true;
        TreeNode left = root.left;
        TreeNode right = root.right;
        Deque<TreeNode> stack = new ArrayDeque<>();
        if(left != null){
            if(right != null){
                stack.addFirst(left);
                stack.addFirst(right);
            }else
                return false;
        }else if(right != null)
            return false;
        else
            return true;
        
        while(!stack.isEmpty()){
            TreeNode l = stack.removeFirst();
            TreeNode r = stack.removeFirst();
            if(l.val != r.val) return false;
            
            if(l.left != null){
                if(r.right == null) return false;
                stack.addFirst(l.left);
                stack.addFirst(r.right); 
            }else if(r.right != null)
                return false;
            
            
            if(l.right != null){
                if(r.left == null) return false;
                stack.addFirst(l.right);
                stack.addFirst(r.left);
               
            }else if(r.left != null)
                return false;
            
        }
        return true;
        
    }
    
    
    /*
    //recursion
    public boolean isSymmetric(TreeNode root) {
        //先用recursion来解，左子树的左孩子和右子树的右孩子比，左子树右孩子和右子树的左孩子比
        if(root == null) return true;
        return helper(root.left, root.right);
    }
   private boolean helper(TreeNode left, TreeNode right){
       if(left == null && right == null) return true;
       if(left == null || right == null) return false;
       if(left.val != right.val) return false;
       return helper(left.left, right.right) && helper(left.right, right.left);
   }
   */
}
