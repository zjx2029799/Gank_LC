class Solution {
    public int[] searchRange(int[] nums, int target) {
        //用两个binary search
        int[] res = {-1, -1};
        if(nums == null || nums.length == 0) return res;
        int left = 0;
        int right = nums.length - 1;
        
        while(left < right){
            //find leftmost
            int mid = left + (right - left) / 2;
            if(nums[mid] < target) left = mid + 1;
            else right = mid;
        }
        if(nums[left] != target) return res;
        res[0] = left;
        
        right = nums.length - 1;
        while(left < right){
            int mid = left + (right - left) / 2;
            if(nums[mid] > target) right = mid;
            else left = mid + 1;
        }
        res[1] = nums[right] != target? right-1: left;
        return res;
    }
    /*
    //worse case O(n)
    public int[] searchRange(int[] nums, int target) {
        //binary search
        int[] res = {-1, -1};
        if(nums == null || nums.length == 0) return res;
        //结果三种情况，没找到，找到一个，找到两个
        int left = 0;
        int right = nums.length - 1;
        int index = -1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(nums[mid] == target){
                index = mid;
                break;
            }else if(nums[mid] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        
        if(index != -1){
            int start = index;
            int end = index;
            while(start >= 0 && nums[start] == target) start --;
            while(end < nums.length && nums[end] == target) end++;
            
            res[0] = start == index? start: start+1;
            res[1] = end == index? end: end-1;
        }
        return res;
    }
    */
}
