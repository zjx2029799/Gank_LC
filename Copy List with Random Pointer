/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head==null) return head;
        Map<RandomListNode,RandomListNode> map = new HashMap<RandomListNode,RandomListNode>();
        RandomListNode cur = head;
        while(cur!=null){
            if(!map.containsKey(cur)){
                RandomListNode node = new RandomListNode(cur.label);
                map.put(cur, node);
            }
            if(cur.next!=null && !map.containsKey(cur.next)){
                RandomListNode next = new RandomListNode(cur.next.label);
                map.put(cur.next, next);
            }
            if(cur.random!=null && !map.containsKey(cur.random)){
                RandomListNode random = new RandomListNode(cur.random.label);
                map.put(cur.random, random);
            }
            
            if(cur.next!=null){
                map.get(cur).next = map.get(cur.next);
            }
            if(cur.random!=null){
                map.get(cur).random = map.get(cur.random);
            }
            cur = cur.next;
        }
        return map.get(head);
    }
}
