class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        //do it without extra space and sort
        //置换法， 要求是在可以对原数组进行修改的时候
        //一种置换是把数组元素置换到其对应的位置， nums[nums[i]-1], nums[i], 这是因为数组范围给定了
        //另一种是设置一个标志，使得扫描过程中能发现重复而不用额外的空间
        
        List<Integer> res = new ArrayList<>();
        if(nums.length < 2) return res;
        for(int i=0; i<nums.length; i++){
            if(nums[nums[i]-1] != nums[i]){
                swap(nums, i, nums[i]-1);
                //交换后这个位置还需继续走一遍循环，直到 nums[nums[i]-1] == nums[i]
                i--;
            }
        }
        for(int i=0; i<nums.length; i++){
            if(nums[i] != i+1 )
                res.add(nums[i]);
        }
        return res;
        /*
        List<Integer> res = new ArrayList<>();
        if(nums.length < 2) return res;
        for(int i=0; i<nums.length; i++){
            int index = Math.abs(nums[i]) - 1;
            if(nums[index] < 0) res.add(index+1);
            nums[index] = -nums[index];
        }
        return res;
        */
    }
    private void swap(int[] nums, int i, int j){
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
    /*
    public List<Integer> findDuplicates(int[] nums) {
        //do it with hashset
        HashSet<Integer> set = new HashSet<>();
        List<Integer> res = new ArrayList<>();
        for(int i=0; i<nums.length; i++){
            if(set.contains(nums[i]))
                res.add(nums[i]);
            else
                set.add(nums[i]);
        }
        return res;
    }
    */
    /*
    public List<Integer> findDuplicates(int[] nums) {
        //primitive 排序 O(nlogN)
        Arrays.sort(nums);
        List<Integer> res = new ArrayList<>();
         if(nums.length < 2) return res;
        for(int i=1; i<nums.length; i++){
            if(nums[i] == nums[i-1])
                res.add(nums[i]);
        }
        return res;
    }
    */
}
